size3 = 0;
size4 = 0;
size5 = 0;


for i=1:malware_numfiles
    size3 = size3 + length(malwareLogFiles(i).window3);
    size4 = size4 + length(malwareLogFiles(i).window4);
    size5 = size5 + length(malwareLogFiles(i).window5);
end
for i=1:benign_numfiles
    size3 = size3 + length(benignLogFiles(i).window3);
    size4 = size4 + length(benignLogFiles(i).window4);
    size5 = size5 + length(benignLogFiles(i).window5);
end
size3 = size3/(benign_numfiles + malware_numfiles);
size4 = size4/(benign_numfiles + malware_numfiles);
size5 = size5/(benign_numfiles + malware_numfiles);

for threshold=[10 20 30 40 50 60 70 80 90 100]
    
    
    
    for N=[3 4 5]
        union_test = [];
        size_default = 0;
        if N == 3
            union_test = union_3;
            size_default = size3;
        elseif N==4
            union_test = union_4;
            size_default = size4;
            
        elseif N==5
            union_test = union_5;
            size_default = size5;
            
        end
        union_test_len = numel(union_test(:,1));
        
        for k = 1:numel(malTestLogFiles)
            %    fprintf('making malTest windowlist and give id with N = %d, %d\n',N,k/malTest_numfiles);
            
            dataArray = malTestLogFiles(k).contents;
            len = numel(dataArray)-N+1;
            singlemalTestwindowidlist = zeros(len,1);
            
            for i=1:len
                temp = dataArray(i:i+N-1)';
                [res, index] = ismember(temp, union_test(:,1:N),'rows');
                if res == 1
                    singlemalTestwindowidlist(i,1) = index;
                else
                    union_test_len = union_test_len + 1;
                    union_test( union_test_len, 1:N) = temp;
                    singlemalTestwindowidlist(i,1) = union_test_len;
                    
                    %fprintf('sth not good %d', union_test_len);
                end
            end
            
            if N == 3
                malTestLogFiles(k).window3 = singlemalTestwindowidlist;
            elseif N==5
                malTestLogFiles(k).window5 = singlemalTestwindowidlist;
            elseif N==4
                malTestLogFiles(k).window4 = singlemalTestwindowidlist;
            end
        end
        
   
        for k = 1:numel(benTestLogFiles)
            %    fprintf('making benTest windowlist and give id with N = %d, %d\n',N,k/benTest_numfiles);
            dataArray = benTestLogFiles(k).contents;
            len = numel(dataArray)-N+1;
            singlebenTestwindowlist = zeros(len,1);
            
            for i=1:len
                temp = dataArray(i:i+N-1)';
                [res, index] = ismember(temp, union_test(:,1:N),'rows');
                if res == 1
                    singlebenTestwindowidlist(i,1) = index;
                else
                    union_test_len = union_test_len + 1;
                    union_test( union_test_len, 1:N) = temp;
                    singlebenTestwindowidlist(i,1) = union_test_len;
                end
            end
            
            if N == 3
                benTestLogFiles(k).window3 = singlebenTestwindowidlist;
                
            elseif N==5
                benTestLogFiles(k).window5 = singlebenTestwindowidlist;
            elseif N==4
                benTestLogFiles(k).window4 = singlebenTestwindowidlist;
            end
            
        end
        
        truecatch = 0;
        falsecatch = 0;
        
        for k = 1:numel(malTestLogFiles)
            %    fprintf('give detection result with N = %d, %d\n',N,k/malTest_numfiles);
            if N == 3
                singlewindowlist = malTestLogFiles(k).window3;
            elseif N==5
                singlewindowlist = malTestLogFiles(k).window5;
            elseif N==4
                singlewindowlist = malTestLogFiles(k).window4;
            end
            
            threshold_scale = threshold*(numel(singlewindowlist)/size_default);
            
            if sum(ismember(singlewindowlist, blacklist))>threshold_scale;
                result = 1;
            else
                result = 0;
            end
            
            truecatch = truecatch + result;
            
            if N == 3
                malTestLogFiles(k).window3result = result;
            elseif N==5
                malTestLogFiles(k).window5result = result;
            elseif N==4
                malTestLogFiles(k).window4result = result;
            end
        end
        
        for k = 1:benTest_numfiles
            %   fprintf('give detection result with N = %d, %d\n',N,k/benTest_numfiles);
            if N == 3
                singlewindowlist = benTestLogFiles(k).window3;
            elseif N==5
                singlewindowlist = benTestLogFiles(k).window5;
            elseif N==4
                singlewindowlist = benTestLogFiles(k).window4;
            end
            
            
            threshold_scale = max(1,threshold*(numel(singlewindowlist)/size_default));
            if sum(ismember(singlewindowlist, blacklist))>threshold_scale;
                result = 1;
            else
                result = 0;
            end
            
            falsecatch = falsecatch + result;
            
            if N == 3
                benTestLogFiles(k).window3result = result;
            elseif N==5
                benTestLogFiles(k).window5result = result;
            elseif N==4
                benTestLogFiles(k).window4result = result;
            end
        end
        
        
        
        fprintf('Testing.... Reference threshold = %d, Window size %d, True positive %.2f, False postitive %.2f\n',threshold, N,truecatch*(100/malTest_numfiles), falsecatch*(100/benTest_numfiles))
        
    end
    fprintf('\n');
end

clearvars benTestlength benTestwindowlist dataArray i index1 j k len mallength malTestwindowlist N occ res1 singlebenTest_seq_id singlebenTest_summary singlebenTestwindowlist singlemalTest_seq_id singlemalTest_summary singlemalTestwindowlist singlewindowlist temp union_unique_seq;



